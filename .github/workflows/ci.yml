name: CI

on:
  push:

jobs:
  test-service:
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: stable
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: /home/runner/.cache/sccache
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: clippy
      - name: Install sccache (ubuntu-latest)
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-service_cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-service_cargo-
      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-service_sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-service_sccache-

      - name: Start sccache server
        run: sccache --start-server

      - name: Run cargo build
        working-directory: service
        run: cargo build

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          args: --manifest-path service/Cargo.toml --all

      - name: Run cargo test
        working-directory: service
        run: cargo test
        env:
          RUST_LOG: debug

      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true

  build-service-container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Get the git tag
        run: |
          echo GIT_TAG=$(echo ${GITHUB_REF} | sed -e "s/refs\/.*\///g") >> $GITHUB_ENV

      - uses: whoan/docker-build-with-cache-action@v5
        with:
          registry: docker.pkg.github.com
          username: "publisher"
          password: "${{ secrets.GITHUB_TOKEN }}"
          image_name: "${{ format('{0}/worlds-service', github.repository) }}"
          image_tag: "${{ env.GIT_TAG }}"
          push_git_tag: true
          context: service

  e2e:
    runs-on: ubuntu-latest
    needs:
      - test-service
      - build-service-container
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the git tag
        run: |
          echo GIT_TAG=$(echo ${GITHUB_REF} | sed -e "s/refs\/.*\///g") >> $GITHUB_ENV

      - name: Docker login
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN

      - name: Pull Service Container
        run: |
          docker pull docker.pkg.github.com/${{ format('{0}/worlds-service', github.repository) }}:${{ env.GIT_TAG }}
          docker tag docker.pkg.github.com/${{ format('{0}/worlds-service', github.repository) }}:${{ env.GIT_TAG }} worlds-service:latest

      - name: Start Services
        working-directory: e2e
        run: docker-compose up -d

      - name: Wait for service
        working-directory: /tmp
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz
          tar -xzvf dockerize-linux-amd64-v0.6.1.tar.gz
          /tmp/dockerize -timeout 30s -wait http://localhost:48000 echo Started

      - name: Service Logs
        if: always()
        working-directory: e2e
        run: docker-compose logs worlds-e2e-service

  deploy-service-container:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - e2e
    steps:
      - name: Get the git tag
        run: |
          echo GIT_TAG=$(echo ${GITHUB_REF} | sed -e "s/refs\/.*\///g") >> $GITHUB_ENV

      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Docker login
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN

      - name: Push container
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          docker pull docker.pkg.github.com/${{ format('{0}/worlds-service', github.repository) }}:${{ env.GIT_TAG }}
          docker tag docker.pkg.github.com/${{ format('{0}/worlds-service', github.repository) }}:${{ env.GIT_TAG }} registry.heroku.com/worlds-cd/web
          docker push registry.heroku.com/worlds-cd/web

      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a worlds-cd web
